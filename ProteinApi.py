#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class ProteinApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def getProteinsByProject(self, projectAccession, **kwargs):
        """retrieve protein identifications by project accession

        Args:
            projectAccession, str: a project accession (example: PXD000001) (required)

            show, int: how many results to return per page (optional)

            page, int: which page (starting from 0) of the result to return (optional)

            

        Returns: ProteinDetailList
        """

        allParams = ['projectAccession', 'show', 'page']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getProteinsByProject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/protein/list/project/{projectAccession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('show' in params):
            queryParams['show'] = self.apiClient.toPathValue(params['show'])
        if ('page' in params):
            queryParams['page'] = self.apiClient.toPathValue(params['page'])
        if ('projectAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['projectAccession']))
            resourcePath = resourcePath.replace('{' + 'projectAccession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ProteinDetailList')
        return responseObject
        

        

    def getProteinsByProjectAndAccession(self, projectAccession, accession, **kwargs):
        """retrieve protein identifications by project accession and protein accession

        Args:
            projectAccession, str: a project accession (example: PXD001536) (required)

            accession, str: a protein accession (example: P38398) (required)

            

        Returns: ProteinDetailList
        """

        allParams = ['projectAccession', 'accession']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getProteinsByProjectAndAccession" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/protein/list/project/{projectAccession}/protein/{accession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('projectAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['projectAccession']))
            resourcePath = resourcePath.replace('{' + 'projectAccession' + '}',
                                                replacement)
        if ('accession' in params):
            replacement = str(self.apiClient.toPathValue(params['accession']))
            resourcePath = resourcePath.replace('{' + 'accession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ProteinDetailList')
        return responseObject
        

        

    def countProteinsByProject(self, projectAccession, **kwargs):
        """count protein identifications by project accession

        Args:
            projectAccession, str: a project accession (example: PXD000001) (required)

            

        Returns: long
        """

        allParams = ['projectAccession']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method countProteinsByProject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/protein/count/project/{projectAccession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('projectAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['projectAccession']))
            resourcePath = resourcePath.replace('{' + 'projectAccession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'long')
        return responseObject
        

        

    def countProteinsByAssay(self, assayAccession, **kwargs):
        """count protein identifications by assay accession

        Args:
            assayAccession, str: an assay accession (example: 22134) (required)

            

        Returns: long
        """

        allParams = ['assayAccession']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method countProteinsByAssay" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/protein/count/assay/{assayAccession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('assayAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['assayAccession']))
            resourcePath = resourcePath.replace('{' + 'assayAccession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'long')
        return responseObject
        

        

    def getProteinsByAssay(self, assayAccession, **kwargs):
        """retrieve protein identifications by assay accession

        Args:
            assayAccession, str: an assay accession (example: 22134) (required)

            show, int: how many results to return per page (optional)

            page, int: which page (starting from 0) of the result to return (optional)

            

        Returns: ProteinDetailList
        """

        allParams = ['assayAccession', 'show', 'page']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getProteinsByAssay" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/protein/list/assay/{assayAccession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('show' in params):
            queryParams['show'] = self.apiClient.toPathValue(params['show'])
        if ('page' in params):
            queryParams['page'] = self.apiClient.toPathValue(params['page'])
        if ('assayAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['assayAccession']))
            resourcePath = resourcePath.replace('{' + 'assayAccession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ProteinDetailList')
        return responseObject
        

        

    




