#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class PeptideApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def countPsmsByProject(self, projectAccession, **kwargs):
        """count peptide identifications by project accession

        Args:
            projectAccession, str: a project accession (example: PXD000001) (required)

            

        Returns: long
        """

        allParams = ['projectAccession']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method countPsmsByProject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/peptide/count/project/{projectAccession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('projectAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['projectAccession']))
            resourcePath = resourcePath.replace('{' + 'projectAccession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'long')
        return responseObject
        

        

    def getPsmsByProject(self, projectAccession, **kwargs):
        """retrieve peptide identifications by project accession

        Args:
            projectAccession, str: a project accession (example: PXD000001) (required)

            show, int: how many results to return per page (optional)

            page, int: which page (starting from 0) of the result to return (optional)

            

        Returns: PsmDetailList
        """

        allParams = ['projectAccession', 'show', 'page']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getPsmsByProject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/peptide/list/project/{projectAccession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('show' in params):
            queryParams['show'] = self.apiClient.toPathValue(params['show'])
        if ('page' in params):
            queryParams['page'] = self.apiClient.toPathValue(params['page'])
        if ('projectAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['projectAccession']))
            resourcePath = resourcePath.replace('{' + 'projectAccession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PsmDetailList')
        return responseObject
        

        

    def getPsmsByProjectAndSequence(self, projectAccession, sequence, **kwargs):
        """retrieve peptide identifications by project accession and peptide sequence

        Args:
            projectAccession, str: a project accession (example: PXD000001) (required)

            sequence, str: the peptide sequence to limit the query on (example: GIANSILIK) (required)

            

        Returns: PsmDetailList
        """

        allParams = ['projectAccession', 'sequence']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getPsmsByProjectAndSequence" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/peptide/list/project/{projectAccession}/sequence/{sequence}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('projectAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['projectAccession']))
            resourcePath = resourcePath.replace('{' + 'projectAccession' + '}',
                                                replacement)
        if ('sequence' in params):
            replacement = str(self.apiClient.toPathValue(params['sequence']))
            resourcePath = resourcePath.replace('{' + 'sequence' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PsmDetailList')
        return responseObject
        

        

    def countPsmsByProjectAndSequence(self, projectAccession, sequence, **kwargs):
        """count peptide identifications by project accession and peptide sequence

        Args:
            projectAccession, str: a project accession (example: PXD000001) (required)

            sequence, str: the peptide sequence to limit the query on (example: GIANSILIK) (required)

            

        Returns: long
        """

        allParams = ['projectAccession', 'sequence']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method countPsmsByProjectAndSequence" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/peptide/count/project/{projectAccession}/sequence/{sequence}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('projectAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['projectAccession']))
            resourcePath = resourcePath.replace('{' + 'projectAccession' + '}',
                                                replacement)
        if ('sequence' in params):
            replacement = str(self.apiClient.toPathValue(params['sequence']))
            resourcePath = resourcePath.replace('{' + 'sequence' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'long')
        return responseObject
        

        

    def getPsmsByAssay(self, assayAccession, **kwargs):
        """retrieve peptide identifications by assay accession

        Args:
            assayAccession, str: an assay accession (example: 22134) (required)

            show, int: how many results to return per page (optional)

            page, int: which page (starting from 0) of the result to return (optional)

            

        Returns: PsmDetailList
        """

        allParams = ['assayAccession', 'show', 'page']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getPsmsByAssay" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/peptide/list/assay/{assayAccession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('show' in params):
            queryParams['show'] = self.apiClient.toPathValue(params['show'])
        if ('page' in params):
            queryParams['page'] = self.apiClient.toPathValue(params['page'])
        if ('assayAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['assayAccession']))
            resourcePath = resourcePath.replace('{' + 'assayAccession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PsmDetailList')
        return responseObject
        

        

    def countPsmsByAssay(self, assayAccession, **kwargs):
        """count peptide identifications by assay accession

        Args:
            assayAccession, str: an assay accession (example: 22134) (required)

            

        Returns: long
        """

        allParams = ['assayAccession']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method countPsmsByAssay" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/peptide/count/assay/{assayAccession}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('assayAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['assayAccession']))
            resourcePath = resourcePath.replace('{' + 'assayAccession' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'long')
        return responseObject
        

        

    def getPsmsByAssayAndSequence(self, assayAccession, sequence, **kwargs):
        """retrieve peptide identifications by assay accession and peptide sequence

        Args:
            assayAccession, str: a assay accession (example: 22134) (required)

            sequence, str: the peptide sequence to limit the query on (example: GIANSILIK) (required)

            

        Returns: PsmDetailList
        """

        allParams = ['assayAccession', 'sequence']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getPsmsByAssayAndSequence" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/peptide/list/assay/{assayAccession}/sequence/{sequence}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('assayAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['assayAccession']))
            resourcePath = resourcePath.replace('{' + 'assayAccession' + '}',
                                                replacement)
        if ('sequence' in params):
            replacement = str(self.apiClient.toPathValue(params['sequence']))
            resourcePath = resourcePath.replace('{' + 'sequence' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PsmDetailList')
        return responseObject
        

        

    def countPsmsByAssayAndSequence(self, assayAccession, sequence, **kwargs):
        """count peptide identifications by assay accession and peptide sequence

        Args:
            assayAccession, str: a assay accession (example: 22134) (required)

            sequence, str: the peptide sequence to limit the query on (example: GIANSILIK) (required)

            

        Returns: long
        """

        allParams = ['assayAccession', 'sequence']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method countPsmsByAssayAndSequence" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/peptide/count/assay/{assayAccession}/sequence/{sequence}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('assayAccession' in params):
            replacement = str(self.apiClient.toPathValue(params['assayAccession']))
            resourcePath = resourcePath.replace('{' + 'assayAccession' + '}',
                                                replacement)
        if ('sequence' in params):
            replacement = str(self.apiClient.toPathValue(params['sequence']))
            resourcePath = resourcePath.replace('{' + 'sequence' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'long')
        return responseObject
        

        

    




